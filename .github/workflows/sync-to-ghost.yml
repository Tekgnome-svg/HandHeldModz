name: Sync Ghost Posts

on:
  push:
    paths:
      - "Guides/**/*.md"   # watch all markdown files in Guides folder and subfolders

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repo
      - uses: actions/checkout@v3

      # 2️⃣ Setup Node.js
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # 3️⃣ Install dependencies
      - name: Install dependencies
        run: npm install gray-matter node-fetch@2

      # 4️⃣ Sync Markdown files to Ghost
      - name: Sync Markdown to Ghost
        env:
          GHOST_ADMIN_API_URL: ${{ secrets.GHOST_ADMIN_API_URL }}
          GHOST_ADMIN_API_KEY: ${{ secrets.GHOST_ADMIN_API_KEY }}
        run: |
          node <<'EOF'
          const fs = require("fs");
          const path = require("path");
          const matter = require("gray-matter");
          const fetch = require("node-fetch");

          const ghostUrl = process.env.GHOST_ADMIN_API_URL.replace(/\/$/, ""); // remove trailing slash
          const ghostKey = process.env.GHOST_ADMIN_API_KEY;

          async function upsertPost(filePath) {
            const raw = fs.readFileSync(filePath, "utf8");
            const { data, content } = matter(raw);

            if (!data.title || !data.slug) {
              console.error(`Missing title or slug in ${filePath}`);
              return;
            }

            // Check if post exists by slug
            const slugUrl = `${ghostUrl}/ghost/api/admin/posts/slug/${data.slug}/`;
            const existingRes = await fetch(slugUrl, {
              headers: { Authorization: `Ghost ${ghostKey}` }
            });
            let existing = null;
            if (existingRes.ok) existing = await existingRes.json();

            const postPayload = {
              title: data.title,
              slug: data.slug,
              html: content,
              status: data.status || "draft",
              tags: data.tags || []
            };

            if (existing && existing.posts && existing.posts.length > 0) {
              // Update post
              const id = existing.posts[0].id;
              await fetch(`${ghostUrl}/ghost/api/admin/posts/${id}/`, {
                method: "PUT",
                headers: {
                  "Authorization": `Ghost ${ghostKey}`,
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({ posts: [postPayload] })
              });
              console.log(`Updated post: ${data.title}`);
            } else {
              // Create new post
              await fetch(`${ghostUrl}/ghost/api/admin/posts/`, {
                method: "POST",
                headers: {
                  "Authorization": `Ghost ${ghostKey}`,
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({ posts: [postPayload] })
              });
              console.log(`Created new post: ${data.title}`);
            }
          }

          // Read all Markdown files in Guides folder
          const dir = "Guides";
          fs.readdirSync(dir, { withFileTypes: true }).forEach(entry => {
            const fullPath = path.join(dir, entry.name);
            if (entry.isFile() && entry.name.endsWith(".md")) {
              upsertPost(fullPath);
            } else if (entry.isDirectory()) {
              fs.readdirSync(fullPath).forEach(subFile => {
                if (subFile.endsWith(".md")) upsertPost(path.join(fullPath, subFile));
              });
            }
          });
          EOF
